[[index| back home]]

= Write up =
- [ ] Experiments
- [ ] Thesis
  - [ ] Check bibliography
  - [ ] Check data


= Readings =

*Goal*: We want to know how other sells an interpreter implementation story?

* Design and Implementation of an Abstract Interpreter for VHDL
  A very different domain - a hardware language.

* The Design and Implementation of C-like Lanaguge Interpreter
*Motivation*:  dynamic modifiable usage
{{{
    Changes can also be made to the program fairly quickly without 
    having to wait for it to be compiled again [1], which is very useful in some cases. 
    For example, many network games requiring long running time
    can use script engine (interpreter) to serve the purpose of
    modifying game logic without restarting the game, such as
    embedding Lua/Python to run games dynamically [2]. 
}}}

*Contribution*:
A work implementation with emphasis on code reusability and extensibility.

*Structure*:
     1. System Overview
     2. Lex, Parser, Syntatic analyzer and finally implementation.

*Publish*:
IEEE 2011, International Symposium on Intelligence Information Processing and Trusted Computing

*Note*:
No novel idea, 3 pages paper.

* GraalSqueak
*Motivation*: implement bytecode interpreter under Truffle framework which is usually
used to build AST interpreter. (Simply because no one did that before)

*Contribution*:
Provide a bytecode and a AST implementation of Squeak/Smalltalk under Truffle and compare their
peformance. Discuss the tradeoff, advantages and disvantages.

*Structure*:
    1. Background and intro.
    2. Implementation, with some detailed but trivial optimization.
    3. Evaluation.
    4. Discussion.

*Publish*:
ACM ICOOLPS

*Note*:
Much like an empirical study.

* A Fast Absratct Syntax Tree Interpreter for R
*Motivation*:  Strightforward.
{{{
In this paper, we try to see how far one can push a naive implementation 
while remaining portable and not requiring expertise in compilers and runtime systems.
}}}

{{{
We aim to show that a relatively performant interpreter and runtime system can be obtained
without requiring deep knowledge of compiler techniques.
}}}

*Contribution*:
{{{
Many languages start with a straightforward AST interpreter.
As their popularity grows, the initial implementation usually
starts to feel slow.
This paper shows that the battle is not
necessarily over. 
We have implemented a Java-based AST
interpreter for a subset of the R language which, on some
benchmarks, is 8.5x faster than a C AST interpreter and 4.9x
faster than a byte-code interpreter. The techniques we used
are all, individually, simple and require understanding of the
application domain rather than heroic compiler skills
}}}

*Publish*:
VEE 14

*Note*:
Almost a straight walkthrough of their implemetation with good evaluation results.

* A Performant Scheme Interpreter in asm.js
*Motivation*:
{{{
However, a high-level language such as JavaScript 
does not meet the necessary requirements for an efficient
language implementation. We therefore turn to a more optimizable, restricted subset of the language, asm.js [6] as
a means to improve the efficiency of performance-critical
JavaScript applications such as an interpreter.
}}}

*Contribution*:
{{{
_Overall, this paper provides an experience report of our particular usage of asm.js._
We make the following contributions

* An overview of the performance impact that can be
achieved by integrating asm.js into existing projects.
* A solution by introducing a macro preprocessor to
improve readability, maintainability and performance
when writing asm.js code by hand.
* A comparison between two different strategies using
either handwritten or compiled asm.js to port runtimes
and codebases to JavaScript.
* A handwritten implementation of a garbage-collected
Scheme interpreter, written in asm.js to enable good
performance on the web.
}}}

Structure:
1. Intro
2. Settings
3. Implementation details. (With how to use macro to overcome some issue)
4. Optimization. (Very basic)
5. Evaluation.

*Publish*:
V49, 2017, Computer Languages, System & Structure.

*Notes*:
Another experience report.

* CutLang: a cut-based HEP analysis description language and runtime interpreter
* TextX: A Python tool for Domain-Specific Languages implementation
 _More of a intro to this domain specific language instead. We cannot do that as_
 _we already sell Souffle as DSL before when synthsisier came out._
 
